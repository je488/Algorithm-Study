#1부터 n까지 오름차순 정렬된 상태에서 1부터 자리를 찾는 방식으로 풀기
#길이가 n이고 0으로 초기화 된 1차원 리스트 res 생성
#res를 탐색하면서 값이 0이면 카운트(0은 빈칸) -> 0의 개수가 li의 값과 같으면 그 다음자리가 내 자리
#1의 자리를 찾는 경우, 0의 개수가 li[1]과 같으면 그 다음에 비어있는 자리(0인 자리)가 1의 자리임
#res에 이미 들어가 있는 숫자는 현재 자리를 찾는 숫자보다 작으므로 앞에 있거나 뒤에 있거나 상관 없음
#3의 자리를 찾을 때, 1과 2의 자리는 3보다 앞에 있어도 상관 없음
#1과 2는 3보다 작으므로 3보다 큰 수의 개수를 셀 때 어차피 포함되지 않음
#i를 이용하여 1부터 n까지 자리를 찾음, j는 res를 탐색하며 0인지 판별
#res[j]가 0이면 li[i]에서 1씩 감소시킴
#li[i] == 0이면 내 앞에 있는 큰 수들의 빈 공간을 다 만듦 -> 그 다음에 빈자리(값이 0)가 내 자리
#1부터 n까지 자리를 찾는 것을 표현하기 위해 li[0]에 0을 추가하고 li[1]부터 li[n]까지 탐색
import sys
# sys.stdin = open("input.txt", "r")
n = int(input())
li = list(map(int, input().split()))
res = [0] * n
li.insert(0, 0)
for i in range(1, n+1):
    for j in range(n):
        if li[i] == 0 and res[j] == 0:
            res[j] = i
            break
        elif res[j] == 0:
            li[i] -= 1
print(*res)

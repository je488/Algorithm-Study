#BOJ_14500_1.py와 같은 방식이나 다르게 구현
#BOJ_14500_1.py는 19개의 테트로미노에 대해 기준칸에 따라 i, j가 어떻게 변하는지 하나씩 작성
#따라서 실수했을 때 발견하기 매우 어려움
#block은 19개의 테트로미노에 대해 기준칸에 따라 i, j가 얼마나 변하는지 저장한 리스트
#BOJ_14500_1.py보다 실수했을 때 발견하기 수월하고 코드 수도 줄어듦
import sys
sys.stdin = open("input.txt", "r")
input = sys.stdin.readline
blocks = (
    ((0, 1), (0, 2), (0, 3)),
    ((1, 0), (2, 0), (3, 0)),
    ((1, 0), (1, 1), (1, 2)),
    ((0, 1), (1, 0), (2, 0)),
    ((0, 1), (0, 2), (1, 2)),
    ((1, 0), (2, 0), (2, -1)),
    ((0, 1), (0, 2), (-1, 2)),
    ((1, 0), (2, 0), (2, 1)),
    ((0, 1), (0, 2), (1, 0)),
    ((0, 1), (1, 1), (2, 1)),
    ((0, 1), (1, 0), (1, 1)),
    ((0, 1), (-1, 1), (-1, 2)),
    ((1, 0), (1, 1), (2, 1)),
    ((0, 1), (1, 1), (1, 2)),
    ((1, 0), (1, -1), (2, -1)),
    ((0, 1), (0, 2), (-1, 1)),
    ((0, 1), (0, 2), (1, 1)),
    ((1, 0), (2, 0), (1, 1)),
    ((1, 0), (2, 0), (1, -1))
)
n, m = map(int, input().split())
a = [list(map(int, input().split())) for _ in range(n)]
ans = 0
for i in range(n):
    for j in range(m):
        for block in blocks:
            ok = True
            s = a[i][j]
            for dx, dy in block:
                x, y = i + dx, j + dy
                if 0 <= x < n and 0 <= y < m:
                    s += a[x][y]
                else:
                    ok = False
                    break
            if ok and s > ans:
                ans = s
print(ans)
